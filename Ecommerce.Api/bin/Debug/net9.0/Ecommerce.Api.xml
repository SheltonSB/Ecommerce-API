<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ecommerce.Api</name>
    </assembly>
    <members>
        <member name="T:Ecommerce.Api.Contracts.CreateCategoryDto">
            <summary>
            DTO for creating a new category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateCategoryDto.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateCategoryDto.Description">
            <summary>
            Description of the category
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.UpdateCategoryDto">
            <summary>
            DTO for updating an existing category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateCategoryDto.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateCategoryDto.Description">
            <summary>
            Description of the category
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.CategoryDto">
            <summary>
            DTO for returning category information
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CategoryDto.Id">
            <summary>
            Unique identifier for the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CategoryDto.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CategoryDto.Description">
            <summary>
            Description of the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CategoryDto.ProductCount">
            <summary>
            Number of products in this category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CategoryDto.CreatedAt">
            <summary>
            Timestamp when the category was created
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CategoryDto.UpdatedAt">
            <summary>
            Timestamp when the category was last updated
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.CategoryListItemDto">
            <summary>
            DTO for category list items
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CategoryListItemDto.Id">
            <summary>
            Unique identifier for the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CategoryListItemDto.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CategoryListItemDto.Description">
            <summary>
            Description of the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CategoryListItemDto.ProductCount">
            <summary>
            Number of products in this category
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.Paged`1">
            <summary>
            Represents a paginated result set
            </summary>
            <typeparam name="T">The type of items in the result set</typeparam>
        </member>
        <member name="P:Ecommerce.Api.Contracts.Paged`1.Items">
            <summary>
            The items in the current page
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.Paged`1.Page">
            <summary>
            Current page number (1-based)
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.Paged`1.PageSize">
            <summary>
            Number of items per page
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.Paged`1.TotalItems">
            <summary>
            Total number of items across all pages
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.Paged`1.TotalPages">
            <summary>
            Total number of pages
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.Paged`1.HasPreviousPage">
            <summary>
            Indicates if there is a previous page
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.Paged`1.HasNextPage">
            <summary>
            Indicates if there is a next page
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Contracts.Paged`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new paginated result
            </summary>
            <param name="items">The items for the current page</param>
            <param name="page">Current page number</param>
            <param name="pageSize">Items per page</param>
            <param name="totalItems">Total items across all pages</param>
        </member>
        <member name="M:Ecommerce.Api.Contracts.Paged`1.#ctor">
            <summary>
            Creates an empty paginated result
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.PagedRequest">
            <summary>
            Represents pagination parameters for API requests
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PagedRequest.Page">
            <summary>
            Page number (1-based, defaults to 1)
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PagedRequest.PageSize">
            <summary>
            Number of items per page (defaults to 10, max 100)
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PagedRequest.SortBy">
            <summary>
            Field to sort by
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PagedRequest.SortDirection">
            <summary>
            Sort direction (asc or desc)
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Contracts.PagedRequest.Validate">
            <summary>
            Validates and normalizes the pagination parameters
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.CreateProductDto">
            <summary>
            DTO for creating a new product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateProductDto.Name">
            <summary>
            The name of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateProductDto.Description">
            <summary>
            Description of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateProductDto.Price">
            <summary>
            Price of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateProductDto.Sku">
            <summary>
            SKU (Stock Keeping Unit) of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateProductDto.StockQuantity">
            <summary>
            Stock quantity available
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateProductDto.IsActive">
            <summary>
            Indicates if the product is active
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateProductDto.CategoryId">
            <summary>
            Category ID for the product
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.UpdateProductDto">
            <summary>
            DTO for updating an existing product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateProductDto.Name">
            <summary>
            The name of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateProductDto.Description">
            <summary>
            Description of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateProductDto.Sku">
            <summary>
            SKU (Stock Keeping Unit) of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateProductDto.StockQuantity">
            <summary>
            Stock quantity available
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateProductDto.IsActive">
            <summary>
            Indicates if the product is active
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateProductDto.CategoryId">
            <summary>
            Category ID for the product
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.UpdateStockDto">
            <summary>
            DTO for updating product stock
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateStockDto.StockQuantity">
            <summary>
            New stock quantity
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.ProductDto">
            <summary>
            DTO for returning product information
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductDto.Id">
            <summary>
            Unique identifier for the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductDto.Name">
            <summary>
            The name of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductDto.Description">
            <summary>
            Description of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductDto.Price">
            <summary>
            Current price of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductDto.Sku">
            <summary>
            SKU (Stock Keeping Unit) of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductDto.StockQuantity">
            <summary>
            Stock quantity available
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductDto.IsActive">
            <summary>
            Indicates if the product is active
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductDto.Category">
            <summary>
            Category information
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductDto.CreatedAt">
            <summary>
            Timestamp when the product was created
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductDto.UpdatedAt">
            <summary>
            Timestamp when the product was last updated
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.ProductListItemDto">
            <summary>
            DTO for product list items
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductListItemDto.Id">
            <summary>
            Unique identifier for the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductListItemDto.Name">
            <summary>
            The name of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductListItemDto.Price">
            <summary>
            Current price of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductListItemDto.Sku">
            <summary>
            SKU (Stock Keeping Unit) of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductListItemDto.StockQuantity">
            <summary>
            Stock quantity available
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductListItemDto.IsActive">
            <summary>
            Indicates if the product is active
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.ProductListItemDto.CategoryName">
            <summary>
            Category name
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.PriceHistoryDto">
            <summary>
            DTO for price history entries
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PriceHistoryDto.Id">
            <summary>
            Unique identifier for the price history entry
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PriceHistoryDto.OldPrice">
            <summary>
            The previous price
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PriceHistoryDto.NewPrice">
            <summary>
            The new price
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PriceHistoryDto.ChangedAt">
            <summary>
            When the price change occurred
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PriceHistoryDto.PercentageChange">
            <summary>
            Percentage change in price
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PriceHistoryDto.IsPriceIncrease">
            <summary>
            Indicates if this was a price increase
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.CreateSaleDto">
            <summary>
            DTO for creating a new sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateSaleDto.CustomerName">
            <summary>
            Customer name
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateSaleDto.CustomerEmail">
            <summary>
            Customer email
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateSaleDto.Notes">
            <summary>
            Notes or comments about the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateSaleDto.TaxAmount">
            <summary>
            Tax amount applied to the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateSaleDto.DiscountAmount">
            <summary>
            Discount amount applied to the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateSaleDto.SaleItems">
            <summary>
            Sale items
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.CreateSaleItemDto">
            <summary>
            DTO for creating a sale item
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateSaleItemDto.ProductId">
            <summary>
            Product ID
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreateSaleItemDto.Quantity">
            <summary>
            Quantity of the product
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.UpdateSaleDto">
            <summary>
            DTO for updating sale information
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateSaleDto.CustomerName">
            <summary>
            Customer name
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateSaleDto.CustomerEmail">
            <summary>
            Customer email
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateSaleDto.Notes">
            <summary>
            Notes or comments about the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateSaleDto.TaxAmount">
            <summary>
            Tax amount applied to the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.UpdateSaleDto.DiscountAmount">
            <summary>
            Discount amount applied to the sale
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.SaleDto">
            <summary>
            DTO for returning sale information
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.Id">
            <summary>
            Unique identifier for the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.SaleNumber">
            <summary>
            Unique sale number for tracking
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.SaleDate">
            <summary>
            Date and time when the sale occurred
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.TotalAmount">
            <summary>
            Total amount of the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.TaxAmount">
            <summary>
            Tax amount applied to the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.DiscountAmount">
            <summary>
            Discount amount applied to the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.FinalAmount">
            <summary>
            Final amount after tax and discount
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.Status">
            <summary>
            Status of the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.CustomerName">
            <summary>
            Customer information
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.CustomerEmail">
            <summary>
            Customer email
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.Notes">
            <summary>
            Notes or comments about the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.SaleItems">
            <summary>
            Sale items
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.PaymentInfo">
            <summary>
            Payment information
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.CreatedAt">
            <summary>
            Timestamp when the sale was created
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleDto.UpdatedAt">
            <summary>
            Timestamp when the sale was last updated
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.SaleListItemDto">
            <summary>
            DTO for sale list items
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleListItemDto.Id">
            <summary>
            Unique identifier for the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleListItemDto.SaleNumber">
            <summary>
            Unique sale number for tracking
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleListItemDto.SaleDate">
            <summary>
            Date and time when the sale occurred
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleListItemDto.FinalAmount">
            <summary>
            Final amount after tax and discount
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleListItemDto.Status">
            <summary>
            Status of the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleListItemDto.CustomerName">
            <summary>
            Customer name
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleListItemDto.ItemCount">
            <summary>
            Number of items in the sale
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.SaleItemDto">
            <summary>
            DTO for sale items
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleItemDto.Id">
            <summary>
            Unique identifier for the sale item
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleItemDto.Quantity">
            <summary>
            Quantity of the product sold
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleItemDto.UnitPrice">
            <summary>
            Price per unit at the time of sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleItemDto.TotalPrice">
            <summary>
            Total price for this item
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.SaleItemDto.Product">
            <summary>
            Product information
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.PaymentInfoDto">
            <summary>
            DTO for payment information
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PaymentInfoDto.Id">
            <summary>
            Unique identifier for the payment info
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PaymentInfoDto.PaymentMethod">
            <summary>
            Payment method used
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PaymentInfoDto.Amount">
            <summary>
            Amount paid
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PaymentInfoDto.Status">
            <summary>
            Payment status
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PaymentInfoDto.TransactionId">
            <summary>
            Transaction ID from payment processor
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PaymentInfoDto.PaymentReference">
            <summary>
            Payment reference number
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PaymentInfoDto.ProcessedAt">
            <summary>
            When the payment was processed
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.PaymentInfoDto.Notes">
            <summary>
            Additional payment details or notes
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Contracts.CreatePaymentInfoDto">
            <summary>
            DTO for creating payment information
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreatePaymentInfoDto.PaymentMethod">
            <summary>
            Payment method used
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreatePaymentInfoDto.Amount">
            <summary>
            Amount paid
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreatePaymentInfoDto.PaymentReference">
            <summary>
            Payment reference number
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Contracts.CreatePaymentInfoDto.Notes">
            <summary>
            Additional payment details or notes
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Data.AppDbContext">
            <summary>
            Database context for the E-commerce application
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Data.AppDbContext.UpdateTimestamps">
            <summary>
            Updates timestamps for entities before saving
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Data.AppDbContext.SeedData(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Seeds initial data for the application
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Data.Seed">
            <summary>
            Database seeding functionality
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Data.Seed.Initialize(Ecommerce.Api.Data.AppDbContext)">
            <summary>
            Initializes the database with seed data
            </summary>
            <param name="context">Database context</param>
        </member>
        <member name="T:Ecommerce.Api.Domain.Category">
            <summary>
            Represents a product category in the e-commerce system
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Category.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Category.Description">
            <summary>
            Description of the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Category.Products">
            <summary>
            Navigation property for products in this category
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.Category.IsValid">
            <summary>
            Validates the category data
            </summary>
            <returns>True if the category is valid</returns>
        </member>
        <member name="T:Ecommerce.Api.Domain.Entity">
            <summary>
            Base entity class that provides common properties for all domain entities
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Entity.Id">
            <summary>
            Unique identifier for the entity
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Entity.CreatedAt">
            <summary>
            Timestamp when the entity was created
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Entity.UpdatedAt">
            <summary>
            Timestamp when the entity was last updated
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Entity.IsDeleted">
            <summary>
            Indicates if the entity is soft deleted
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Entity.DeletedAt">
            <summary>
            Timestamp when the entity was soft deleted
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.Entity.MarkAsDeleted">
            <summary>
            Marks the entity as deleted (soft delete)
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.Entity.Restore">
            <summary>
            Restores a soft-deleted entity
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.Entity.UpdateTimestamp">
            <summary>
            Updates the UpdatedAt timestamp
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Domain.PaymentInfo">
            <summary>
            Represents payment information for a sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PaymentInfo.SaleId">
            <summary>
            Foreign key for the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PaymentInfo.PaymentMethod">
            <summary>
            Payment method used
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PaymentInfo.Amount">
            <summary>
            Amount paid
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PaymentInfo.Status">
            <summary>
            Payment status
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PaymentInfo.TransactionId">
            <summary>
            Transaction ID from payment processor
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PaymentInfo.PaymentReference">
            <summary>
            Payment reference number
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PaymentInfo.ProcessedAt">
            <summary>
            When the payment was processed
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PaymentInfo.Notes">
            <summary>
            Additional payment details or notes
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PaymentInfo.Sale">
            <summary>
            Navigation property for the sale
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.PaymentInfo.MarkAsProcessed(System.String)">
            <summary>
            Marks the payment as processed
            </summary>
            <param name="transactionId">Transaction ID from payment processor</param>
        </member>
        <member name="M:Ecommerce.Api.Domain.PaymentInfo.MarkAsFailed(System.String)">
            <summary>
            Marks the payment as failed
            </summary>
            <param name="reason">Reason for failure</param>
        </member>
        <member name="M:Ecommerce.Api.Domain.PaymentInfo.MarkAsRefunded">
            <summary>
            Marks the payment as refunded
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.PaymentInfo.IsValid">
            <summary>
            Validates the payment information
            </summary>
            <returns>True if the payment info is valid</returns>
        </member>
        <member name="T:Ecommerce.Api.Domain.PaymentMethod">
            <summary>
            Enum representing payment methods
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentMethod.CreditCard">
            <summary>
            Credit card payment
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentMethod.DebitCard">
            <summary>
            Debit card payment
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentMethod.PayPal">
            <summary>
            PayPal payment
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentMethod.BankTransfer">
            <summary>
            Bank transfer
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentMethod.Cash">
            <summary>
            Cash payment
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentMethod.DigitalWallet">
            <summary>
            Digital wallet payment
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentMethod.Cryptocurrency">
            <summary>
            Cryptocurrency payment
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Domain.PaymentStatus">
            <summary>
            Enum representing payment status
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentStatus.Pending">
            <summary>
            Payment is pending
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentStatus.Completed">
            <summary>
            Payment has been completed successfully
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentStatus.Failed">
            <summary>
            Payment has failed
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentStatus.Refunded">
            <summary>
            Payment has been refunded
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.PaymentStatus.Cancelled">
            <summary>
            Payment has been cancelled
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Domain.PriceHistory">
            <summary>
            Represents the price history for a product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PriceHistory.ProductId">
            <summary>
            Foreign key for the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PriceHistory.OldPrice">
            <summary>
            The previous price
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PriceHistory.NewPrice">
            <summary>
            The new price
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PriceHistory.ChangedAt">
            <summary>
            When the price change occurred
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.PriceHistory.Product">
            <summary>
            Navigation property for the product
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.PriceHistory.GetPercentageChange">
            <summary>
            Calculates the percentage change in price
            </summary>
            <returns>The percentage change</returns>
        </member>
        <member name="M:Ecommerce.Api.Domain.PriceHistory.IsPriceIncrease">
            <summary>
            Determines if the price increased
            </summary>
            <returns>True if price increased</returns>
        </member>
        <member name="M:Ecommerce.Api.Domain.PriceHistory.IsPriceDecrease">
            <summary>
            Determines if the price decreased
            </summary>
            <returns>True if price decreased</returns>
        </member>
        <member name="T:Ecommerce.Api.Domain.Product">
            <summary>
            Represents a product in the e-commerce system
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Product.Name">
            <summary>
            The name of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Product.Description">
            <summary>
            Description of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Product.Price">
            <summary>
            Current price of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Product.Sku">
            <summary>
            SKU (Stock Keeping Unit) of the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Product.StockQuantity">
            <summary>
            Stock quantity available
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Product.IsActive">
            <summary>
            Indicates if the product is active and available for sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Product.CategoryId">
            <summary>
            Foreign key for the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Product.Category">
            <summary>
            Navigation property for the category
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Product.PriceHistories">
            <summary>
            Navigation property for price history
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Product.SaleItems">
            <summary>
            Navigation property for sale items
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.Product.UpdatePrice(System.Decimal,System.Decimal)">
            <summary>
            Creates a new price history entry when price changes
            </summary>
            <param name="oldPrice">The previous price</param>
            <param name="newPrice">The new price</param>
        </member>
        <member name="M:Ecommerce.Api.Domain.Product.UpdateStock(System.Int32)">
            <summary>
            Updates stock quantity
            </summary>
            <param name="quantity">The new stock quantity</param>
        </member>
        <member name="M:Ecommerce.Api.Domain.Product.ReduceStock(System.Int32)">
            <summary>
            Reduces stock by the specified amount
            </summary>
            <param name="quantity">Amount to reduce</param>
        </member>
        <member name="M:Ecommerce.Api.Domain.Product.IsValid">
            <summary>
            Validates the product data
            </summary>
            <returns>True if the product is valid</returns>
        </member>
        <member name="T:Ecommerce.Api.Domain.Sale">
            <summary>
            Represents a sale transaction in the e-commerce system
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.SaleNumber">
            <summary>
            Unique sale number for tracking
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.SaleDate">
            <summary>
            Date and time when the sale occurred
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.TotalAmount">
            <summary>
            Total amount of the sale (calculated from items)
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.TaxAmount">
            <summary>
            Tax amount applied to the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.DiscountAmount">
            <summary>
            Discount amount applied to the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.FinalAmount">
            <summary>
            Final amount after tax and discount
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.Status">
            <summary>
            Status of the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.CustomerName">
            <summary>
            Customer information
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.CustomerEmail">
            <summary>
            Customer email
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.Notes">
            <summary>
            Notes or comments about the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.SaleItems">
            <summary>
            Navigation property for sale items
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.Sale.PaymentInfo">
            <summary>
            Navigation property for payment information
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.Sale.CalculateTotalAmount">
            <summary>
            Calculates the total amount from sale items
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.Sale.CalculateFinalAmount">
            <summary>
            Calculates the final amount after tax and discount
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.Sale.AddSaleItem(Ecommerce.Api.Domain.Product,System.Int32)">
            <summary>
            Adds an item to the sale
            </summary>
            <param name="product">The product to add</param>
            <param name="quantity">Quantity to add</param>
        </member>
        <member name="M:Ecommerce.Api.Domain.Sale.CompleteSale">
            <summary>
            Completes the sale and reduces product stock
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.Sale.CancelSale">
            <summary>
            Cancels the sale
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.Sale.IsValid">
            <summary>
            Validates the sale data
            </summary>
            <returns>True if the sale is valid</returns>
        </member>
        <member name="T:Ecommerce.Api.Domain.SaleStatus">
            <summary>
            Enum representing the status of a sale
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.SaleStatus.Pending">
            <summary>
            Sale is pending completion
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.SaleStatus.Completed">
            <summary>
            Sale has been completed
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.SaleStatus.Cancelled">
            <summary>
            Sale has been cancelled
            </summary>
        </member>
        <member name="F:Ecommerce.Api.Domain.SaleStatus.Refunded">
            <summary>
            Sale has been refunded
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Domain.SaleItem">
            <summary>
            Represents an item within a sale transaction
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.SaleItem.SaleId">
            <summary>
            Foreign key for the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.SaleItem.ProductId">
            <summary>
            Foreign key for the product
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.SaleItem.Quantity">
            <summary>
            Quantity of the product sold
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.SaleItem.UnitPrice">
            <summary>
            Price per unit at the time of sale (immutable for historical accuracy)
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.SaleItem.TotalPrice">
            <summary>
            Total price for this item (Quantity * UnitPrice)
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.SaleItem.Sale">
            <summary>
            Navigation property for the sale
            </summary>
        </member>
        <member name="P:Ecommerce.Api.Domain.SaleItem.Product">
            <summary>
            Navigation property for the product
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.SaleItem.CalculateTotalPrice">
            <summary>
            Calculates the total price based on quantity and unit price
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Domain.SaleItem.UpdateQuantity(System.Int32)">
            <summary>
            Updates the quantity and recalculates total price
            </summary>
            <param name="newQuantity">The new quantity</param>
        </member>
        <member name="M:Ecommerce.Api.Domain.SaleItem.IsValid">
            <summary>
            Validates the sale item data
            </summary>
            <returns>True if the sale item is valid</returns>
        </member>
        <member name="T:Ecommerce.Api.Infrastructure.GlobalExceptionMiddleware">
            <summary>
            Global exception handling middleware
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Infrastructure.ErrorResponse">
            <summary>
            Standard error response format
            </summary>
        </member>
        <member name="T:Ecommerce.Api.Infrastructure.QueryableExtensions">
            <summary>
            Extension methods for IQueryable to support pagination, filtering, and sorting
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Infrastructure.QueryableExtensions.Paginate``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Applies pagination to a queryable collection
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
            <param name="query">The queryable collection</param>
            <param name="page">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <returns>Paginated queryable</returns>
        </member>
        <member name="M:Ecommerce.Api.Infrastructure.QueryableExtensions.SortBy``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            Applies sorting to a queryable collection
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
            <param name="query">The queryable collection</param>
            <param name="sortBy">Property name to sort by</param>
            <param name="sortDirection">Sort direction (asc or desc)</param>
            <returns>Sorted queryable</returns>
        </member>
        <member name="M:Ecommerce.Api.Infrastructure.QueryableExtensions.SortBy``1(System.Linq.IQueryable{``0},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Applies multiple sorting criteria to a queryable collection
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
            <param name="query">The queryable collection</param>
            <param name="sortCriteria">Dictionary of property names and sort directions</param>
            <returns>Sorted queryable</returns>
        </member>
        <member name="M:Ecommerce.Api.Infrastructure.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies a filter condition to a queryable collection
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
            <param name="query">The queryable collection</param>
            <param name="predicate">Filter condition</param>
            <returns>Filtered queryable</returns>
        </member>
        <member name="M:Ecommerce.Api.Infrastructure.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies a filter condition to a queryable collection
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
            <param name="query">The queryable collection</param>
            <param name="condition">Condition to check</param>
            <param name="predicate">Filter condition</param>
            <returns>Filtered queryable</returns>
        </member>
        <member name="M:Ecommerce.Api.Infrastructure.QueryableExtensions.SearchIn``1(System.Linq.IQueryable{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.String}}[])">
            <summary>
            Searches for text in specified properties
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
            <param name="query">The queryable collection</param>
            <param name="searchTerm">Term to search for</param>
            <param name="properties">Properties to search in</param>
            <returns>Filtered queryable</returns>
        </member>
        <member name="M:Ecommerce.Api.Infrastructure.QueryableExtensions.GetNestedProperty(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Gets a nested property from an expression
            </summary>
            <param name="parameter">The parameter expression</param>
            <param name="propertyPath">The property path (e.g., "Category.Name")</param>
            <returns>Property expression or null if not found</returns>
        </member>
        <member name="T:Ecommerce.Api.Services.CategoryService">
            <summary>
            Service for category operations
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Services.CategoryService.GetAllAsync(Ecommerce.Api.Contracts.PagedRequest)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.CategoryService.GetAllSimpleAsync">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.CategoryService.GetByIdAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.CategoryService.CreateAsync(Ecommerce.Api.Contracts.CreateCategoryDto)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.CategoryService.UpdateAsync(System.Int32,Ecommerce.Api.Contracts.UpdateCategoryDto)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.CategoryService.DeleteAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.CategoryService.RestoreAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.CategoryService.NameExistsAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="T:Ecommerce.Api.Services.ICategoryService">
            <summary>
            Interface for category service operations
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Services.ICategoryService.GetAllAsync(Ecommerce.Api.Contracts.PagedRequest)">
            <summary>
            Gets all categories with pagination
            </summary>
            <param name="request">Pagination request parameters</param>
            <returns>Paginated list of categories</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ICategoryService.GetAllSimpleAsync">
            <summary>
            Gets all categories without pagination
            </summary>
            <returns>List of all categories</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ICategoryService.GetByIdAsync(System.Int32)">
            <summary>
            Gets a category by ID
            </summary>
            <param name="id">Category ID</param>
            <returns>Category details or null if not found</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ICategoryService.CreateAsync(Ecommerce.Api.Contracts.CreateCategoryDto)">
            <summary>
            Creates a new category
            </summary>
            <param name="dto">Category creation data</param>
            <returns>Created category details</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ICategoryService.UpdateAsync(System.Int32,Ecommerce.Api.Contracts.UpdateCategoryDto)">
            <summary>
            Updates an existing category
            </summary>
            <param name="id">Category ID</param>
            <param name="dto">Category update data</param>
            <returns>Updated category details</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ICategoryService.DeleteAsync(System.Int32)">
            <summary>
            Soft deletes a category
            </summary>
            <param name="id">Category ID</param>
            <returns>True if deleted successfully</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ICategoryService.RestoreAsync(System.Int32)">
            <summary>
            Restores a soft-deleted category
            </summary>
            <param name="id">Category ID</param>
            <returns>True if restored successfully</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ICategoryService.NameExistsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Checks if a category name already exists
            </summary>
            <param name="name">Category name to check</param>
            <param name="excludeId">Category ID to exclude from check (for updates)</param>
            <returns>True if name exists</returns>
        </member>
        <member name="T:Ecommerce.Api.Services.IProductService">
            <summary>
            Interface for product service operations
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.GetAllAsync(Ecommerce.Api.Contracts.PagedRequest,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets all products with pagination and filtering
            </summary>
            <param name="request">Pagination request parameters</param>
            <param name="categoryId">Optional category filter</param>
            <param name="searchTerm">Optional search term</param>
            <param name="isActive">Optional active status filter</param>
            <returns>Paginated list of products</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.GetByIdAsync(System.Int32)">
            <summary>
            Gets a product by ID
            </summary>
            <param name="id">Product ID</param>
            <returns>Product details or null if not found</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.GetBySkuAsync(System.String)">
            <summary>
            Gets a product by SKU
            </summary>
            <param name="sku">Product SKU</param>
            <returns>Product details or null if not found</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.CreateAsync(Ecommerce.Api.Contracts.CreateProductDto)">
            <summary>
            Creates a new product
            </summary>
            <param name="dto">Product creation data</param>
            <returns>Created product details</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.UpdateAsync(System.Int32,Ecommerce.Api.Contracts.UpdateProductDto)">
            <summary>
            Updates an existing product
            </summary>
            <param name="id">Product ID</param>
            <param name="dto">Product update data</param>
            <returns>Updated product details</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.UpdateStockAsync(System.Int32,Ecommerce.Api.Contracts.UpdateStockDto)">
            <summary>
            Updates product stock quantity
            </summary>
            <param name="id">Product ID</param>
            <param name="dto">Stock update data</param>
            <returns>Updated product details</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.DeleteAsync(System.Int32)">
            <summary>
            Soft deletes a product
            </summary>
            <param name="id">Product ID</param>
            <returns>True if deleted successfully</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.RestoreAsync(System.Int32)">
            <summary>
            Restores a soft-deleted product
            </summary>
            <param name="id">Product ID</param>
            <returns>True if restored successfully</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.GetPriceHistoryAsync(System.Int32)">
            <summary>
            Gets price history for a product
            </summary>
            <param name="productId">Product ID</param>
            <returns>List of price history entries</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.SkuExistsAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Checks if a product SKU already exists
            </summary>
            <param name="sku">Product SKU to check</param>
            <param name="excludeId">Product ID to exclude from check (for updates)</param>
            <returns>True if SKU exists</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.GetLowStockProductsAsync(System.Int32)">
            <summary>
            Gets products with low stock
            </summary>
            <param name="threshold">Stock threshold (default 10)</param>
            <returns>List of products with low stock</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.IProductService.GetByCategoryAsync(System.Int32)">
            <summary>
            Gets products by category
            </summary>
            <param name="categoryId">Category ID</param>
            <returns>List of products in the category</returns>
        </member>
        <member name="T:Ecommerce.Api.Services.ISaleService">
            <summary>
            Interface for sale service operations
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Services.ISaleService.GetAllAsync(Ecommerce.Api.Contracts.PagedRequest,System.String,System.String)">
            <summary>
            Gets all sales with pagination and filtering
            </summary>
            <param name="request">Pagination request parameters</param>
            <param name="status">Optional status filter</param>
            <param name="customerName">Optional customer name filter</param>
            <returns>Paginated list of sales</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ISaleService.GetByIdAsync(System.Int32)">
            <summary>
            Gets a sale by ID
            </summary>
            <param name="id">Sale ID</param>
            <returns>Sale details or null if not found</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ISaleService.CreateAsync(Ecommerce.Api.Contracts.CreateSaleDto)">
            <summary>
            Creates a new sale
            </summary>
            <param name="dto">Sale creation data</param>
            <returns>Created sale details</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ISaleService.UpdateAsync(System.Int32,Ecommerce.Api.Contracts.UpdateSaleDto)">
            <summary>
            Updates an existing sale
            </summary>
            <param name="id">Sale ID</param>
            <param name="dto">Sale update data</param>
            <returns>Updated sale details</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ISaleService.CompleteAsync(System.Int32)">
            <summary>
            Completes a sale
            </summary>
            <param name="id">Sale ID</param>
            <returns>True if completed successfully</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ISaleService.CancelAsync(System.Int32)">
            <summary>
            Cancels a sale
            </summary>
            <param name="id">Sale ID</param>
            <returns>True if cancelled successfully</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ISaleService.AddPaymentAsync(System.Int32,Ecommerce.Api.Contracts.CreatePaymentInfoDto)">
            <summary>
            Adds payment information to a sale
            </summary>
            <param name="saleId">Sale ID</param>
            <param name="dto">Payment information</param>
            <returns>True if added successfully</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ISaleService.GetByDateRangeAsync(System.DateTime,System.DateTime)">
            <summary>
            Gets sales within a date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <returns>List of sales in the date range</returns>
        </member>
        <member name="M:Ecommerce.Api.Services.ISaleService.GetSalesSummaryAsync">
            <summary>
            Gets sales summary statistics
            </summary>
            <returns>Sales summary data</returns>
        </member>
        <member name="T:Ecommerce.Api.Services.ProductService">
            <summary>
            Service for product operations
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.GetAllAsync(Ecommerce.Api.Contracts.PagedRequest,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.GetByIdAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.GetBySkuAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.CreateAsync(Ecommerce.Api.Contracts.CreateProductDto)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.UpdateAsync(System.Int32,Ecommerce.Api.Contracts.UpdateProductDto)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.UpdateStockAsync(System.Int32,Ecommerce.Api.Contracts.UpdateStockDto)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.DeleteAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.RestoreAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.GetPriceHistoryAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.SkuExistsAsync(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.GetLowStockProductsAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.ProductService.GetByCategoryAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Ecommerce.Api.Services.SaleService">
            <summary>
            Service for sale operations
            </summary>
        </member>
        <member name="M:Ecommerce.Api.Services.SaleService.GetAllAsync(Ecommerce.Api.Contracts.PagedRequest,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.SaleService.GetByIdAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.SaleService.CreateAsync(Ecommerce.Api.Contracts.CreateSaleDto)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.SaleService.UpdateAsync(System.Int32,Ecommerce.Api.Contracts.UpdateSaleDto)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.SaleService.CompleteAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.SaleService.CancelAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.SaleService.AddPaymentAsync(System.Int32,Ecommerce.Api.Contracts.CreatePaymentInfoDto)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.SaleService.GetByDateRangeAsync(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Ecommerce.Api.Services.SaleService.GetSalesSummaryAsync">
            <inheritdoc />
        </member>
    </members>
</doc>
